# Generated by Django 4.2.5 on 2025-08-16 01:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("users", "0001_initial"),
        ("pricing", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="tariffprofile",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tariff_profiles",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="tariff",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_tariffs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="tariff",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tariffs",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="tariff",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="updated_tariffs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="serviceplan",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="serviceplan",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                help_text="Tenant this record belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_records",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="serviceplan",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="pricingrule",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="pricingrule",
            name="service_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pricing_rules",
                to="pricing.serviceplan",
            ),
        ),
        migrations.AddField(
            model_name="pricingrule",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                help_text="Tenant this record belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_records",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="pricingrule",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="pricecalculation",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="pricecalculation",
            name="customer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="price_calculations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="pricecalculation",
            name="service_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="pricing.serviceplan"
            ),
        ),
        migrations.AddField(
            model_name="pricecalculation",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                help_text="Tenant this record belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_records",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="pricecalculation",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="priceblock",
            name="tariff_profile",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="price_blocks",
                to="pricing.tariffprofile",
            ),
        ),
        migrations.AddField(
            model_name="priceblock",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="price_blocks",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="customertariffoverride",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tariff_overrides",
                to="users.account",
            ),
        ),
        migrations.AddField(
            model_name="customertariffoverride",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_tariff_overrides",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customertariffoverride",
            name="base_tariff",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="customer_overrides",
                to="pricing.tariff",
            ),
        ),
        migrations.AddField(
            model_name="customertariffoverride",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_tariff_overrides",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customertariffoverride",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_pricing",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="customer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="custom_pricing",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="service_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="pricing.serviceplan"
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                help_text="Tenant this record belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_records",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="customerpricing",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_%(class)s_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="tariffprofile",
            index=models.Index(
                fields=["tariff", "day_type", "block_type"],
                name="pricing_tar_tariff__35c1f3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tariffprofile",
            index=models.Index(
                fields=["start_time", "end_time"], name="pricing_tar_start_t_dcf1da_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tariffprofile",
            index=models.Index(
                fields=["season", "season_start", "season_end"],
                name="pricing_tar_season_92d091_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tariff",
            index=models.Index(
                fields=["tenant", "tariff_type", "service_type"],
                name="pricing_tar_tenant__41b69d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tariff",
            index=models.Index(
                fields=["is_active", "valid_from", "valid_to"],
                name="pricing_tar_is_acti_eaad9f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tariff",
            index=models.Index(
                fields=["tariff_code"], name="pricing_tar_tariff__f6b834_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="tariff",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("valid_to__isnull", True),
                    ("valid_to__gt", models.F("valid_from")),
                    _connector="OR",
                ),
                name="valid_date_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="tariff",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("tenant", "service_type", "is_default"),
                name="unique_default_tariff_per_service",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceplan",
            index=models.Index(
                fields=["tenant", "service_type", "status"],
                name="finance_ser_tenant__a1aa04_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceplan",
            index=models.Index(
                fields=["tenant", "plan_code"], name="finance_ser_tenant__61e681_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="serviceplan",
            index=models.Index(
                fields=["tenant", "is_featured", "status"],
                name="finance_ser_tenant__c6c825_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceplan",
            index=models.Index(
                fields=["is_shared_across_brands"],
                name="finance_ser_is_shar_8cd5d6_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="serviceplan",
            constraint=models.UniqueConstraint(
                fields=("tenant", "plan_code"), name="unique_plan_code_per_tenant"
            ),
        ),
        migrations.AddIndex(
            model_name="pricingrule",
            index=models.Index(
                fields=["tenant", "service_plan", "rule_type"],
                name="finance_pri_tenant__4e1461_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricingrule",
            index=models.Index(
                fields=["tenant", "valid_from", "valid_to"],
                name="finance_pri_tenant__ae84d2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricingrule",
            index=models.Index(
                fields=["tenant", "priority"], name="finance_pri_tenant__56fe71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pricecalculation",
            index=models.Index(
                fields=["tenant", "customer", "period_start"],
                name="finance_pri_tenant__a05c9b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricecalculation",
            index=models.Index(
                fields=["tenant", "service_plan", "period_start"],
                name="finance_pri_tenant__5e923f_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="pricecalculation",
            constraint=models.UniqueConstraint(
                fields=("tenant", "customer", "service_plan", "period_start"),
                name="unique_calculation_per_tenant",
            ),
        ),
        migrations.AddIndex(
            model_name="priceblock",
            index=models.Index(
                fields=["tariff_profile", "tier_number"],
                name="pricing_pri_tariff__cd1bd7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="priceblock",
            index=models.Index(
                fields=["valid_from", "valid_to"], name="pricing_pri_valid_f_83e2af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customertariffoverride",
            index=models.Index(
                fields=["account", "valid_from"], name="pricing_cus_account_d4206d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customertariffoverride",
            index=models.Index(
                fields=["base_tariff", "is_approved"],
                name="pricing_cus_base_ta_91e6cb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customertariffoverride",
            index=models.Index(
                fields=["valid_from", "valid_to"], name="pricing_cus_valid_f_f18b18_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="customertariffoverride",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("valid_to__isnull", True),
                    ("valid_to__gt", models.F("valid_from")),
                    _connector="OR",
                ),
                name="override_valid_date_range",
            ),
        ),
        migrations.AddIndex(
            model_name="customerpricing",
            index=models.Index(
                fields=["tenant", "customer", "service_plan"],
                name="finance_cus_tenant__545706_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customerpricing",
            index=models.Index(
                fields=["tenant", "effective_from", "effective_to"],
                name="finance_cus_tenant__901594_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="customerpricing",
            constraint=models.UniqueConstraint(
                fields=("tenant", "customer", "service_plan", "effective_from"),
                name="unique_customer_pricing_per_tenant",
            ),
        ),
    ]
