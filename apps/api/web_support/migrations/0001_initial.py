# Generated by Django 4.2.5 on 2025-08-16 01:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("users", "0001_initial"),
        ("connections", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ticket_number", models.CharField(max_length=20, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("billing", "Billing Inquiry"),
                            ("technical", "Technical Issue"),
                            ("service", "Service Request"),
                            ("complaint", "Complaint"),
                            ("compliment", "Compliment"),
                            ("connection", "Connection Issue"),
                            ("outage", "Outage Report"),
                            ("meter", "Meter Reading Issue"),
                            ("payment", "Payment Issue"),
                            ("account", "Account Management"),
                            ("general", "General Inquiry"),
                            ("emergency", "Emergency"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("critical", "Critical"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                (
                    "service_area",
                    models.CharField(
                        choices=[
                            ("electricity", "Electricity"),
                            ("broadband", "Broadband"),
                            ("mobile", "Mobile"),
                            ("billing", "Billing"),
                            ("account", "Account"),
                            ("general", "General"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("pending_customer", "Pending Customer Response"),
                            ("pending_internal", "Pending Internal Review"),
                            ("escalated", "Escalated"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                (
                    "assigned_team",
                    models.CharField(
                        blank=True,
                        help_text="Team or department assigned to handle this ticket",
                        max_length=50,
                    ),
                ),
                (
                    "contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("chat", "Live Chat"),
                            ("portal", "Customer Portal"),
                            ("social", "Social Media"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                (
                    "contact_details",
                    models.JSONField(
                        default=dict, help_text="Contact information and preferences"
                    ),
                ),
                ("resolution", models.TextField(blank=True)),
                (
                    "resolution_category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("information_provided", "Information Provided"),
                            ("issue_resolved", "Issue Resolved"),
                            ("service_restored", "Service Restored"),
                            ("billing_adjusted", "Billing Adjusted"),
                            ("account_updated", "Account Updated"),
                            ("escalated_external", "Escalated to External Party"),
                            ("no_action_required", "No Action Required"),
                            ("duplicate", "Duplicate Ticket"),
                            ("customer_resolved", "Customer Self-Resolved"),
                        ],
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("first_response_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "target_first_response_hours",
                    models.PositiveIntegerField(default=24),
                ),
                ("target_resolution_hours", models.PositiveIntegerField(default=72)),
                (
                    "customer_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Customer satisfaction rating (1-5)",
                        null=True,
                    ),
                ),
                ("customer_feedback", models.TextField(blank=True)),
                ("internal_notes", models.TextField(blank=True)),
                (
                    "tags",
                    models.JSONField(
                        default=list, help_text="Tags for categorization and search"
                    ),
                ),
                (
                    "source_channel",
                    models.CharField(
                        blank=True,
                        help_text="Original channel where ticket was created",
                        max_length=50,
                    ),
                ),
                (
                    "source_reference",
                    models.CharField(
                        blank=True,
                        help_text="External reference number or ID",
                        max_length=100,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "account",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer account (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to="users.account",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Support agent assigned to this ticket",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific connection/service (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to="connections.connection",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer who created the ticket",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_ticket",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_tickets",
                        to="web_support.ticket",
                    ),
                ),
                (
                    "related_tickets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related or duplicate tickets",
                        to="web_support.ticket",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to="users.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SupportKnowledgeBase",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("content", models.TextField()),
                ("summary", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("billing", "Billing"),
                            ("technical", "Technical"),
                            ("account", "Account Management"),
                            ("service", "Service Information"),
                            ("troubleshooting", "Troubleshooting"),
                            ("policy", "Policies & Procedures"),
                            ("faq", "Frequently Asked Questions"),
                        ],
                        max_length=20,
                    ),
                ),
                ("tags", models.JSONField(default=list)),
                ("keywords", models.TextField(blank=True, help_text="Search keywords")),
                (
                    "audience",
                    models.CharField(
                        choices=[
                            ("internal", "Internal (Agents Only)"),
                            ("customer", "Customer Facing"),
                            ("both", "Both Internal and Customer"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("version", models.PositiveIntegerField(default=1)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("helpful_votes", models.PositiveIntegerField(default=0)),
                ("unhelpful_votes", models.PositiveIntegerField(default=0)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("review_due_date", models.DateField(blank=True, null=True)),
                ("last_reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authored_articles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "previous_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="newer_versions",
                        to="web_support.supportknowledgebase",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_articles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_articles",
                        to="users.tenant",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="CallLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("call_id", models.CharField(max_length=50, unique=True)),
                ("phone_number", models.CharField(max_length=20)),
                ("customer_name", models.CharField(blank=True, max_length=200)),
                (
                    "call_type",
                    models.CharField(
                        choices=[
                            ("inbound", "Inbound"),
                            ("outbound", "Outbound"),
                            ("callback", "Callback"),
                            ("transfer", "Transfer"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "call_status",
                    models.CharField(
                        choices=[
                            ("answered", "Answered"),
                            ("missed", "Missed"),
                            ("busy", "Busy"),
                            ("no_answer", "No Answer"),
                            ("voicemail", "Voicemail"),
                            ("dropped", "Dropped"),
                        ],
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField()),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("duration_seconds", models.PositiveIntegerField(default=0)),
                ("purpose", models.CharField(blank=True, max_length=200)),
                ("summary", models.TextField(blank=True)),
                ("outcome", models.TextField(blank=True)),
                ("recording_url", models.URLField(blank=True)),
                (
                    "recording_duration",
                    models.PositiveIntegerField(
                        default=0, help_text="Recording duration in seconds"
                    ),
                ),
                ("has_recording", models.BooleanField(default=False)),
                (
                    "call_quality_score",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Call quality rating (1-5)",
                        null=True,
                    ),
                ),
                ("compliance_reviewed", models.BooleanField(default=False)),
                ("compliance_notes", models.TextField(blank=True)),
                ("requires_followup", models.BooleanField(default=False)),
                ("followup_date", models.DateTimeField(blank=True, null=True)),
                ("followup_notes", models.TextField(blank=True)),
                ("phone_system_id", models.CharField(blank=True, max_length=100)),
                (
                    "external_references",
                    models.JSONField(
                        default=dict,
                        help_text="External system references and metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="handled_calls",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="call_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="call_logs",
                        to="users.tenant",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="call_logs",
                        to="web_support.ticket",
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("note", models.TextField()),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("internal", "Internal Note"),
                            ("customer_response", "Customer Response"),
                            ("agent_response", "Agent Response"),
                            ("system", "System Generated"),
                            ("escalation", "Escalation Note"),
                            ("resolution", "Resolution Note"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                (
                    "is_internal",
                    models.BooleanField(
                        default=True, help_text="Whether note is visible to customer"
                    ),
                ),
                ("is_system_generated", models.BooleanField(default=False)),
                (
                    "attachments",
                    models.JSONField(
                        default=list, help_text="List of file attachments"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ticket_notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="web_support.ticket",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "indexes": [
                    models.Index(
                        fields=["ticket", "created_at"],
                        name="web_support_ticket__ebf848_idx",
                    ),
                    models.Index(
                        fields=["note_type", "is_internal"],
                        name="web_support_note_ty_48e1f9_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["tenant", "status", "priority"],
                name="web_support_tenant__d98758_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["customer", "created_at"], name="web_support_custome_a9413e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["assigned_to", "status"], name="web_support_assigne_a2b340_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["ticket_type", "service_area"],
                name="web_support_ticket__b93d86_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["created_at", "resolved_at"],
                name="web_support_created_f00aa3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="supportknowledgebase",
            index=models.Index(
                fields=["tenant", "category", "status"],
                name="web_support_tenant__2f1b11_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="supportknowledgebase",
            index=models.Index(
                fields=["audience", "status"], name="web_support_audienc_2a50a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supportknowledgebase",
            index=models.Index(fields=["slug"], name="web_support_slug_3a4f43_idx"),
        ),
        migrations.AddIndex(
            model_name="supportknowledgebase",
            index=models.Index(
                fields=["published_at"], name="web_support_publish_5184fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calllog",
            index=models.Index(
                fields=["tenant", "started_at"], name="web_support_tenant__72fd76_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calllog",
            index=models.Index(
                fields=["customer", "call_type"], name="web_support_custome_50ba69_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calllog",
            index=models.Index(
                fields=["agent", "started_at"], name="web_support_agent_i_0e951b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calllog",
            index=models.Index(
                fields=["phone_number", "started_at"],
                name="web_support_phone_n_31670c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calllog",
            index=models.Index(
                fields=["ticket"], name="web_support_ticket__0ebbd4_idx"
            ),
        ),
    ]
