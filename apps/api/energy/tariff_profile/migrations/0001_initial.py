# Generated by Django 4.2.5 on 2025-08-16 01:53

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ElectricityTOUProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("profile_code", models.CharField(max_length=50, unique=True)),
                ("profile_name", models.CharField(max_length=200)),
                (
                    "profile_type",
                    models.CharField(
                        choices=[
                            ("residential_tou", "Residential TOU"),
                            ("commercial_tou", "Commercial TOU"),
                            ("industrial_tou", "Industrial TOU"),
                            ("controlled_load", "Controlled Load"),
                            ("uncontrolled_load", "Uncontrolled Load"),
                            ("generation", "Generation Profile"),
                            ("demand_profile", "Demand Profile"),
                            ("capacity_profile", "Capacity Profile"),
                        ],
                        max_length=25,
                    ),
                ),
                ("distributor_code", models.CharField(blank=True, max_length=20)),
                ("network_profile_code", models.CharField(blank=True, max_length=50)),
                ("has_seasonal_variation", models.BooleanField(default=False)),
                (
                    "summer_start_month",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Month when summer period starts (1-12)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "summer_end_month",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Month when summer period ends (1-12)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "holiday_treatment",
                    models.CharField(
                        choices=[
                            ("weekend", "Treat as Weekend"),
                            ("weekday", "Treat as Weekday"),
                            ("special", "Special Holiday Rates"),
                            ("ignore", "Ignore Holiday Status"),
                        ],
                        default="weekend",
                        max_length=10,
                    ),
                ),
                (
                    "dst_adjustment_method",
                    models.CharField(
                        choices=[
                            ("skip_hour", "Skip Missing Hour"),
                            ("repeat_hour", "Repeat Extra Hour"),
                            ("pro_rata", "Pro-rata Adjustment"),
                        ],
                        default="pro_rata",
                        max_length=20,
                    ),
                ),
                ("effective_date", models.DateField()),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True)),
                ("usage_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TOUHolidayCalendar",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("holiday_name", models.CharField(max_length=100)),
                ("holiday_date", models.DateField()),
                (
                    "holiday_type",
                    models.CharField(
                        choices=[
                            ("public", "Public Holiday"),
                            ("regional", "Regional Holiday"),
                            ("provincial", "Provincial Anniversary"),
                            ("custom", "Custom Holiday"),
                            ("observance", "Observance Day"),
                        ],
                        max_length=15,
                    ),
                ),
                ("region_code", models.CharField(blank=True, max_length=20)),
                ("applies_nationwide", models.BooleanField(default=True)),
                (
                    "tou_treatment",
                    models.CharField(
                        choices=[
                            ("weekend_rates", "Apply Weekend Rates"),
                            ("weekday_rates", "Apply Weekday Rates"),
                            ("special_rates", "Apply Special Holiday Rates"),
                            ("no_change", "No Rate Change"),
                        ],
                        default="weekend_rates",
                        max_length=15,
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("annual", "Annual (same date)"),
                            ("relative", "Relative (e.g., first Monday)"),
                            ("easter", "Easter-based calculation"),
                            ("custom", "Custom Rule"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "recurrence_rule",
                    models.TextField(
                        blank=True,
                        help_text="JSON or text description of recurrence rule",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TOUPeriodDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "period_code",
                    models.CharField(
                        help_text="Period code (e.g., PEAK, SHOULDER, OFFPEAK, CONTROLLED)",
                        max_length=20,
                    ),
                ),
                ("period_name", models.CharField(max_length=100)),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("peak", "Peak"),
                            ("shoulder", "Shoulder"),
                            ("off_peak", "Off Peak"),
                            ("controlled", "Controlled Load"),
                            ("night_boost", "Night Boost"),
                            ("weekend", "Weekend"),
                            ("holiday", "Holiday"),
                            ("demand", "Demand Period"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "applicable_season",
                    models.CharField(
                        choices=[
                            ("all_year", "All Year"),
                            ("summer", "Summer Only"),
                            ("winter", "Winter Only"),
                            ("shoulder_season", "Shoulder Season"),
                        ],
                        default="all_year",
                        max_length=15,
                    ),
                ),
                ("applies_weekdays", models.BooleanField(default=True)),
                ("applies_saturdays", models.BooleanField(default=False)),
                ("applies_sundays", models.BooleanField(default=False)),
                ("applies_holidays", models.BooleanField(default=False)),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("spans_midnight", models.BooleanField(default=False)),
                ("priority", models.PositiveIntegerField(default=1)),
                ("is_billable_period", models.BooleanField(default=True)),
                ("is_settlement_period", models.BooleanField(default=True)),
                ("is_controlled_load", models.BooleanField(default=False)),
                ("control_signal_required", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TOUProfileAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("assigned_from", models.DateField()),
                ("assigned_to", models.DateField(blank=True, null=True)),
                (
                    "register_codes",
                    models.JSONField(
                        default=list,
                        help_text="List of register codes this profile applies to",
                    ),
                ),
                ("priority", models.PositiveIntegerField(default=1)),
                (
                    "assignment_reason",
                    models.CharField(
                        choices=[
                            ("tariff_creation", "Tariff Creation"),
                            ("profile_update", "Profile Update"),
                            ("regulatory_change", "Regulatory Change"),
                            ("customer_request", "Customer Request"),
                            ("meter_change", "Meter Change"),
                            ("correction", "Correction"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("pending", "Pending"),
                            ("superseded", "Superseded"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=15,
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("assignment_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
    ]
