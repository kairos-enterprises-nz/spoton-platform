# Generated by Django 4.2.5 on 2025-08-16 01:53

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DailyRegisterRead",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("tenant_id", models.UUIDField(help_text="Tenant UUID")),
                (
                    "icp_id",
                    models.CharField(
                        help_text="Installation Control Point identifier",
                        max_length=100,
                    ),
                ),
                (
                    "register_code",
                    models.CharField(
                        help_text="Register code (e.g., A+)", max_length=20
                    ),
                ),
                ("reading_date", models.DateField(help_text="Reading date")),
                (
                    "start_reading",
                    models.DecimalField(
                        decimal_places=4, help_text="Start reading value", max_digits=12
                    ),
                ),
                (
                    "end_reading",
                    models.DecimalField(
                        decimal_places=4, help_text="End reading value", max_digits=12
                    ),
                ),
                (
                    "consumption",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Consumption (end - start)",
                        max_digits=12,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        default="kWh", help_text="Measurement unit", max_length=10
                    ),
                ),
                (
                    "read_type",
                    models.CharField(
                        help_text="Reading type (actual, estimated, etc.)",
                        max_length=20,
                    ),
                ),
                (
                    "quality_flag",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("suspect", "Suspect"),
                            ("error", "Error"),
                            ("estimated", "Estimated"),
                        ],
                        default="valid",
                        help_text="Data quality indicator",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Data source (MEP provider)",
                        max_length=50,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional metadata"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "meter_serial_number",
                    models.CharField(
                        blank=True,
                        help_text="Physical meter serial number",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "meter_register_id",
                    models.CharField(
                        blank=True,
                        help_text="Register ID specific to this meter",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "read_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="Original read timestamp from MEP",
                        null=True,
                    ),
                ),
                (
                    "validation_flag",
                    models.CharField(
                        blank=True,
                        help_text="Validation flag from MEP",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "source_file_name",
                    models.CharField(
                        blank=True,
                        help_text="Source file name",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "metering_processed.daily_register_reads",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="IntervalReadRaw",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "connection_id",
                    models.CharField(
                        help_text="Installation Control Point identifier",
                        max_length=100,
                    ),
                ),
                (
                    "register_code",
                    models.CharField(
                        help_text="Register code (e.g., A+)", max_length=20
                    ),
                ),
                ("timestamp", models.DateTimeField(help_text="Reading timestamp")),
                (
                    "day",
                    models.DateField(
                        help_text="Reading date (extracted from timestamp)"
                    ),
                ),
                (
                    "trading_period",
                    models.IntegerField(
                        blank=True,
                        help_text="Trading period number (1-48 for normal days, 1-46 for DST spring, 1-50 for DST autumn)",
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=4, help_text="Reading value", max_digits=12
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        default="kWh", help_text="Measurement unit", max_length=10
                    ),
                ),
                (
                    "quality_flag",
                    models.CharField(
                        choices=[
                            ("raw", "Raw"),
                            ("valid", "Valid"),
                            ("suspect", "Suspect"),
                            ("error", "Error"),
                            ("manual_override", "Manual Override"),
                        ],
                        default="raw",
                        help_text="Data quality indicator",
                        max_length=20,
                    ),
                ),
                (
                    "flow_direction",
                    models.CharField(
                        blank=True,
                        help_text="Energy flow direction (X=Export, I=Import)",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "register_content_code",
                    models.CharField(
                        blank=True,
                        help_text="Register content code (UN24, EG24, IN19, etc.)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "meter_channel_number",
                    models.CharField(
                        blank=True,
                        help_text="Meter channel number (051, 052, 001, 002, etc.)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Data source (MEP provider)",
                        max_length=50,
                    ),
                ),
                (
                    "import_id",
                    models.UUIDField(
                        blank=True, help_text="Import batch ID", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Comprehensive metadata from source tables including all available fields",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "metering_processed.interval_reads_raw",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeterAggregateDaily",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("aggregate_date", models.DateField(db_index=True)),
                (
                    "day_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "night_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "controlled_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "generation_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "total_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                ("total_intervals", models.IntegerField(default=0)),
                ("valid_intervals", models.IntegerField(default=0)),
                ("estimated_intervals", models.IntegerField(default=0)),
                ("missing_intervals", models.IntegerField(default=0)),
                ("has_estimates", models.BooleanField(default=False)),
                ("has_gaps", models.BooleanField(default=False)),
                ("is_complete", models.BooleanField(default=False)),
                (
                    "calculated_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("calculation_version", models.CharField(default="1.0", max_length=20)),
            ],
            options={
                "verbose_name": "Daily Aggregate",
                "verbose_name_plural": "Daily Aggregates",
                "db_table": "metering_aggregate_daily",
            },
        ),
        migrations.CreateModel(
            name="MeterAggregateMonthly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("year", models.IntegerField(db_index=True)),
                ("month", models.IntegerField(db_index=True)),
                (
                    "day_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "night_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "controlled_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "generation_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                (
                    "total_kwh",
                    models.DecimalField(decimal_places=3, default=0, max_digits=15),
                ),
                ("total_days", models.IntegerField(default=0)),
                ("complete_days", models.IntegerField(default=0)),
                ("estimated_days", models.IntegerField(default=0)),
                ("has_estimates", models.BooleanField(default=False)),
                ("has_gaps", models.BooleanField(default=False)),
                ("is_complete", models.BooleanField(default=False)),
                (
                    "calculated_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("calculation_version", models.CharField(default="1.0", max_length=20)),
            ],
            options={
                "verbose_name": "Monthly Aggregate",
                "verbose_name_plural": "Monthly Aggregates",
                "db_table": "metering_aggregate_monthly",
            },
        ),
        migrations.CreateModel(
            name="MeterCalcDaily",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("register_code", models.CharField(db_index=True, max_length=50)),
                (
                    "read_date",
                    models.DateField(db_index=True, help_text="Reading date"),
                ),
                (
                    "kwh",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Validated kWh reading",
                        max_digits=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("estimated", "Estimated"),
                            ("invalid", "Invalid"),
                            ("suspicious", "Suspicious"),
                            ("missing", "Missing"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("is_estimated", models.BooleanField(db_index=True, default=False)),
                ("estimation_method", models.CharField(blank=True, max_length=30)),
                (
                    "estimation_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("rule_fail_mask", models.BigIntegerField(default=0)),
                (
                    "failed_rules",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "warnings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("source_file_id", models.CharField(blank=True, max_length=200)),
                ("validation_batch_id", models.CharField(blank=True, max_length=100)),
                (
                    "validated_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("validation_version", models.CharField(default="1.0", max_length=20)),
            ],
            options={
                "verbose_name": "Validated Daily Reading",
                "verbose_name_plural": "Validated Daily Readings",
                "db_table": "metering_calc_daily",
            },
        ),
        migrations.CreateModel(
            name="MeterCalcInterval",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("register_code", models.CharField(db_index=True, max_length=50)),
                (
                    "read_at",
                    models.DateTimeField(db_index=True, help_text="Reading timestamp"),
                ),
                (
                    "kwh",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Validated kWh reading",
                        max_digits=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("estimated", "Estimated"),
                            ("invalid", "Invalid"),
                            ("suspicious", "Suspicious"),
                            ("missing", "Missing"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("is_estimated", models.BooleanField(db_index=True, default=False)),
                ("estimation_method", models.CharField(blank=True, max_length=30)),
                (
                    "estimation_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("rule_fail_mask", models.BigIntegerField(default=0)),
                (
                    "failed_rules",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "warnings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("has_gaps", models.BooleanField(default=False)),
                ("has_spikes", models.BooleanField(default=False)),
                ("source_file_id", models.CharField(blank=True, max_length=200)),
                ("validation_batch_id", models.CharField(blank=True, max_length=100)),
                (
                    "validated_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("validation_version", models.CharField(default="1.0", max_length=20)),
            ],
            options={
                "verbose_name": "Validated Interval Reading",
                "verbose_name_plural": "Validated Interval Readings",
                "db_table": "metering_calc_interval",
            },
        ),
        migrations.CreateModel(
            name="MeteringAuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("process_name", models.CharField(db_index=True, max_length=100)),
                ("source_system", models.CharField(db_index=True, max_length=50)),
                ("batch_id", models.CharField(blank=True, max_length=100)),
                ("records_processed", models.IntegerField(default=0)),
                ("records_transformed", models.IntegerField(default=0)),
                ("records_failed", models.IntegerField(default=0)),
                ("start_time", models.DateTimeField(db_index=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "processing_duration_seconds",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("PARTIAL", "Partial Success"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("details", models.TextField(blank=True)),
                ("error_message", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Metering Audit Log",
                "verbose_name_plural": "Metering Audit Logs",
                "db_table": "energy_meteringauditlog",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MeteringPoint",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "meter_number",
                    models.CharField(help_text="Meter serial number", max_length=50),
                ),
                (
                    "meter_point_code",
                    models.CharField(
                        blank=True,
                        help_text="Utility-specific meter point code",
                        max_length=50,
                    ),
                ),
                (
                    "meter_type",
                    models.CharField(
                        choices=[
                            ("smart", "Smart Meter"),
                            ("legacy", "Legacy Meter"),
                            ("amr", "Automated Meter Reading"),
                            ("interval", "Interval Meter"),
                            ("prepay", "Prepayment Meter"),
                            ("import", "Import Only"),
                            ("export", "Export Only"),
                            ("import_export", "Import/Export"),
                        ],
                        max_length=20,
                    ),
                ),
                ("manufacturer", models.CharField(blank=True, max_length=100)),
                ("model", models.CharField(blank=True, max_length=100)),
                ("firmware_version", models.CharField(blank=True, max_length=50)),
                ("installation_date", models.DateField(blank=True, null=True)),
                ("certification_date", models.DateField(blank=True, null=True)),
                ("certification_expiry", models.DateField(blank=True, null=True)),
                (
                    "location_description",
                    models.CharField(
                        blank=True,
                        help_text="E.g., 'Garage wall', 'Exterior south wall'",
                        max_length=200,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("pending", "Pending Installation"),
                            ("removed", "Removed"),
                            ("faulty", "Faulty"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("is_interval_capable", models.BooleanField(default=True)),
                ("is_remote_readable", models.BooleanField(default=True)),
                (
                    "interval_length_minutes",
                    models.IntegerField(
                        default=30, help_text="Typical interval length in minutes"
                    ),
                ),
                ("valid_from", models.DateTimeField(default=django.utils.timezone.now)),
                ("valid_to", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "metering_meteringpoint",
            },
        ),
        migrations.CreateModel(
            name="MeterRawDaily",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("register_code", models.CharField(db_index=True, max_length=50)),
                (
                    "read_date",
                    models.DateField(db_index=True, help_text="Reading date"),
                ),
                (
                    "kwh",
                    models.DecimalField(
                        decimal_places=3, help_text="Raw kWh reading", max_digits=15
                    ),
                ),
                (
                    "reading_type",
                    models.CharField(
                        choices=[
                            ("actual", "Actual Reading"),
                            ("estimated", "Estimated Reading"),
                            ("customer_read", "Customer Self-Read"),
                        ],
                        default="actual",
                        max_length=20,
                    ),
                ),
                ("source_file_id", models.CharField(blank=True, max_length=200)),
                ("source_file_name", models.CharField(blank=True, max_length=500)),
                ("source_row_number", models.IntegerField(blank=True, null=True)),
                ("import_batch_id", models.CharField(blank=True, max_length=100)),
                (
                    "imported_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("raw_status", models.CharField(blank=True, max_length=20)),
                ("raw_quality", models.CharField(blank=True, max_length=20)),
                (
                    "raw_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional raw fields from source",
                    ),
                ),
            ],
            options={
                "verbose_name": "Raw Daily Reading",
                "verbose_name_plural": "Raw Daily Readings",
                "db_table": "metering_raw_daily",
            },
        ),
        migrations.CreateModel(
            name="MeterRawInterval",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("icp_id", models.CharField(db_index=True, max_length=50)),
                ("register_code", models.CharField(db_index=True, max_length=50)),
                (
                    "read_at",
                    models.DateTimeField(db_index=True, help_text="Reading timestamp"),
                ),
                (
                    "kwh",
                    models.DecimalField(
                        decimal_places=3, help_text="Raw kWh reading", max_digits=15
                    ),
                ),
                ("source_file_id", models.CharField(blank=True, max_length=200)),
                ("source_file_name", models.CharField(blank=True, max_length=500)),
                ("source_row_number", models.IntegerField(blank=True, null=True)),
                ("import_batch_id", models.CharField(blank=True, max_length=100)),
                (
                    "imported_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("raw_status", models.CharField(blank=True, max_length=20)),
                ("raw_quality", models.CharField(blank=True, max_length=20)),
                (
                    "raw_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional raw fields from source",
                    ),
                ),
            ],
            options={
                "verbose_name": "Raw Interval Reading",
                "verbose_name_plural": "Raw Interval Readings",
                "db_table": "metering_raw_interval",
            },
        ),
        migrations.CreateModel(
            name="Register",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("register_number", models.CharField(max_length=50)),
                ("register_code", models.CharField(max_length=50)),
                (
                    "tou_type",
                    models.CharField(
                        choices=[
                            ("peak", "Peak"),
                            ("offpeak", "Off-Peak"),
                            ("shoulder", "Shoulder"),
                            ("all_day", "All Day"),
                        ],
                        max_length=20,
                    ),
                ),
                ("unit", models.CharField(default="kWh", max_length=20)),
                (
                    "multiplier",
                    models.DecimalField(decimal_places=5, default=1.0, max_digits=10),
                ),
                (
                    "register_type",
                    models.CharField(
                        choices=[
                            ("consumption", "Consumption"),
                            ("generation", "Generation"),
                            ("power_factor", "Power Factor"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "metering_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registers",
                        to="metering.meteringpoint",
                    ),
                ),
            ],
            options={
                "db_table": "metering_register",
            },
        ),
    ]
