# Generated by Django 4.2.5 on 2025-08-16 01:53

import datetime
from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="MeterType",
            fields=[
                (
                    "code",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "is_smart",
                    models.BooleanField(
                        default=False, help_text="Smart meter with remote reading"
                    ),
                ),
                (
                    "supports_hhr",
                    models.BooleanField(
                        default=False, help_text="Supports half-hourly readings"
                    ),
                ),
                (
                    "supports_interval",
                    models.BooleanField(
                        default=False, help_text="Supports interval data"
                    ),
                ),
                (
                    "typical_read_frequency",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("bi_monthly", "Bi-Monthly"),
                            ("quarterly", "Quarterly"),
                            ("daily", "Daily"),
                            ("hourly", "Hourly"),
                            ("half_hourly", "Half Hourly"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                (
                    "supported_registers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="List of supported register codes",
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Meter Type",
                "verbose_name_plural": "Meter Types",
                "db_table": "energy_validation_meter_type",
            },
        ),
        migrations.CreateModel(
            name="TariffRegisterMap",
            fields=[
                (
                    "register_code",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "tariff_group",
                    models.CharField(
                        choices=[
                            ("day", "Day Rate"),
                            ("night", "Night Rate"),
                            ("controlled", "Controlled Load"),
                            ("inclusive", "Inclusive/Single Rate"),
                            ("generation", "Generation"),
                            ("peak", "Peak Rate"),
                            ("off_peak", "Off Peak Rate"),
                            ("shoulder", "Shoulder Rate"),
                        ],
                        help_text="Business tariff classification",
                        max_length=50,
                    ),
                ),
                (
                    "is_controlled",
                    models.BooleanField(
                        default=False, help_text="Controlled load register"
                    ),
                ),
                (
                    "is_generation",
                    models.BooleanField(default=False, help_text="Generation register"),
                ),
                (
                    "is_import",
                    models.BooleanField(
                        default=True, help_text="Import register (consumption)"
                    ),
                ),
                (
                    "is_export",
                    models.BooleanField(default=False, help_text="Export register"),
                ),
                (
                    "typical_daily_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Typical minimum daily usage (kWh)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "typical_daily_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Typical maximum daily usage (kWh)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Tariff Register Mapping",
                "verbose_name_plural": "Tariff Register Mappings",
                "db_table": "energy_validation_tariff_register_map",
            },
        ),
        migrations.CreateModel(
            name="ValidationBatch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("batch_id", models.CharField(max_length=100, unique=True)),
                ("source_file", models.CharField(blank=True, max_length=500)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("meter_type", models.CharField(blank=True, max_length=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_readings", models.IntegerField(default=0)),
                ("valid_readings", models.IntegerField(default=0)),
                ("invalid_readings", models.IntegerField(default=0)),
                ("estimated_readings", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("processing_duration", models.DurationField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validation_batches_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.tenant"
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Batch",
                "verbose_name_plural": "Validation Batches",
                "db_table": "energy_validation_validation_batch",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ValidationRule",
            fields=[
                (
                    "valid_from",
                    models.DateField(db_index=True, default=datetime.date.today),
                ),
                ("valid_to", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("user", "User Input"),
                            ("import", "Data Import"),
                            ("api", "API Integration"),
                            ("admin", "Admin Override"),
                            ("system", "System Generated"),
                            ("migration", "Data Migration"),
                        ],
                        default="user",
                        max_length=50,
                    ),
                ),
                (
                    "updated_reason",
                    models.CharField(blank=True, editable=False, max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rule_code",
                    models.CharField(default="UNKNOWN", max_length=50, unique=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("range_check", "Range Check"),
                            ("spike_detection", "Spike Detection"),
                            ("continuity_check", "Continuity Check"),
                            ("consistency_check", "Consistency Check"),
                            ("seasonal_check", "Seasonal Check"),
                            ("peer_comparison", "Peer Comparison"),
                            ("trend_analysis", "Trend Analysis"),
                            ("missing_data", "Missing Data Check"),
                            ("plausibility_check", "Plausibility Check"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("warning", "Warning"),
                            ("informational", "Informational"),
                        ],
                        default="warning",
                        max_length=20,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Rule-specific parameters (thresholds, limits, etc.)",
                    ),
                ),
                (
                    "applies_to_meter_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20),
                        blank=True,
                        default=list,
                        help_text="Meter types this rule applies to (empty = all)",
                        size=None,
                    ),
                ),
                (
                    "applies_to_registers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="Register codes this rule applies to (empty = all)",
                        size=None,
                    ),
                ),
                (
                    "applies_to_tariff_groups",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="Tariff groups this rule applies to (empty = all)",
                        size=None,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_blocking",
                    models.BooleanField(
                        default=False,
                        help_text="If true, failing this rule blocks further processing",
                    ),
                ),
                (
                    "triggers_estimation",
                    models.BooleanField(
                        default=False,
                        help_text="If true, failing this rule triggers estimation",
                    ),
                ),
                (
                    "estimation_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("historical_average", "Historical Average"),
                            ("linear_interpolation", "Linear Interpolation"),
                            ("seasonal_profile", "Seasonal Profile"),
                            ("peer_average", "Peer Average"),
                            ("zero_fill", "Zero Fill"),
                            ("carry_forward", "Carry Forward"),
                        ],
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=100, help_text="Lower numbers = higher priority"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Rule",
                "verbose_name_plural": "Validation Rules",
                "db_table": "energy_validation_validation_rule",
                "ordering": ["priority", "rule_code"],
            },
        ),
        migrations.CreateModel(
            name="ValidationWorkflow",
            fields=[
                (
                    "valid_from",
                    models.DateField(db_index=True, default=datetime.date.today),
                ),
                ("valid_to", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("user", "User Input"),
                            ("import", "Data Import"),
                            ("api", "API Integration"),
                            ("admin", "Admin Override"),
                            ("system", "System Generated"),
                            ("migration", "Data Migration"),
                        ],
                        default="user",
                        max_length=50,
                    ),
                ),
                (
                    "updated_reason",
                    models.CharField(blank=True, editable=False, max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("workflow_code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "meter_type",
                    models.CharField(
                        choices=[
                            ("hhr", "Half-Hourly Readings"),
                            ("drr", "Daily Register Readings"),
                            ("nhh", "Non-Half-Hourly"),
                            ("bulk", "Bulk Readings"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        default=list,
                        help_text="Ordered list of validation rule codes to apply",
                    ),
                ),
                (
                    "estimation_config",
                    models.JSONField(
                        default=dict,
                        help_text="Configuration for estimation methods and thresholds",
                    ),
                ),
                (
                    "processing_config",
                    models.JSONField(
                        default=dict,
                        help_text="Batch processing configuration and limits",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "auto_approve_threshold",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("95.00"),
                        help_text="Quality threshold for auto-approval",
                        max_digits=5,
                    ),
                ),
                (
                    "schedule_expression",
                    models.CharField(
                        blank=True,
                        help_text="Cron expression for automatic execution",
                        max_length=100,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Workflow",
                "verbose_name_plural": "Validation Workflows",
                "db_table": "energy_validation_workflow",
                "ordering": ["workflow_code"],
            },
        ),
        migrations.CreateModel(
            name="ValidationSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_id", models.CharField(max_length=100, unique=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "meter_filter",
                    models.JSONField(
                        default=dict, help_text="Filter criteria for meters to process"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_readings", models.IntegerField(default=0)),
                ("processed_readings", models.IntegerField(default=0)),
                ("valid_readings", models.IntegerField(default=0)),
                ("invalid_readings", models.IntegerField(default=0)),
                ("estimated_readings", models.IntegerField(default=0)),
                (
                    "overall_quality_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("processing_duration", models.DurationField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(blank=True, default=dict)),
                (
                    "results_summary",
                    models.JSONField(
                        default=dict,
                        help_text="Summary of validation results and statistics",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validation_sessions_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.tenant"
                    ),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="validation.validationworkflow",
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Session",
                "verbose_name_plural": "Validation Sessions",
                "db_table": "energy_validation_session",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ValidationRuleOverride",
            fields=[
                (
                    "valid_from",
                    models.DateField(db_index=True, default=datetime.date.today),
                ),
                ("valid_to", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("user", "User Input"),
                            ("import", "Data Import"),
                            ("api", "API Integration"),
                            ("admin", "Admin Override"),
                            ("system", "System Generated"),
                            ("migration", "Data Migration"),
                        ],
                        default="user",
                        max_length=50,
                    ),
                ),
                (
                    "updated_reason",
                    models.CharField(blank=True, editable=False, max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "icp_id",
                    models.CharField(
                        blank=True,
                        help_text="Specific ICP (empty = all)",
                        max_length=50,
                    ),
                ),
                (
                    "register_code",
                    models.CharField(
                        blank=True,
                        help_text="Specific register (empty = all)",
                        max_length=50,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Override parameters (merged with rule parameters)",
                    ),
                ),
                (
                    "is_disabled",
                    models.BooleanField(
                        default=False,
                        help_text="If true, disable this rule for the scope",
                    ),
                ),
                ("reason", models.TextField(help_text="Reason for override")),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validation_overrides_approved",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="validation.validationrule",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Rule Override",
                "verbose_name_plural": "Validation Rule Overrides",
                "db_table": "energy_validation_validation_rule_override",
                "ordering": ["-valid_from"],
            },
        ),
        migrations.CreateModel(
            name="ValidationRuleExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("execution_order", models.IntegerField()),
                ("started_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("readings_processed", models.IntegerField(default=0)),
                ("readings_passed", models.IntegerField(default=0)),
                ("readings_failed", models.IntegerField(default=0)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(blank=True, default=dict)),
                (
                    "rule_results",
                    models.JSONField(
                        default=dict, help_text="Rule-specific results and metadata"
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="validation.validationrule",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rule_executions",
                        to="validation.validationsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Rule Execution",
                "verbose_name_plural": "Validation Rule Executions",
                "db_table": "energy_validation_rule_execution",
                "ordering": ["session", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="ValidationResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "icp_id",
                    models.CharField(db_index=True, default="UNKNOWN", max_length=50),
                ),
                (
                    "register_code",
                    models.CharField(db_index=True, default="UNKNOWN", max_length=50),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                (
                    "original_kwh",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=15, null=True
                    ),
                ),
                ("original_status", models.CharField(blank=True, max_length=20)),
                (
                    "final_kwh",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=15, null=True
                    ),
                ),
                (
                    "final_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("valid", "Valid"),
                            ("estimated", "Estimated"),
                            ("invalid", "Invalid"),
                            ("suspicious", "Suspicious"),
                            ("missing", "Missing"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("is_estimated", models.BooleanField(default=False)),
                ("estimation_method", models.CharField(blank=True, max_length=30)),
                (
                    "estimation_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Confidence percentage (0-100)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("rule_fail_mask", models.BigIntegerField(default=0)),
                (
                    "failed_rules",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="List of failed rule codes",
                        size=None,
                    ),
                ),
                (
                    "warnings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("validation_notes", models.TextField(blank=True)),
                (
                    "processed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="validation.validationbatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Result",
                "verbose_name_plural": "Validation Results",
                "db_table": "energy_validation_validation_result",
            },
        ),
        migrations.CreateModel(
            name="ValidationAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("validation_run", "Validation Run"),
                            ("estimation_run", "Estimation Run"),
                            ("override_created", "Override Created"),
                            ("rule_updated", "Rule Updated"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        help_text="Details of the action, e.g., what changed."
                    ),
                ),
                (
                    "related_result",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="validation.validationresult",
                    ),
                ),
                (
                    "related_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="validation.validationrule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed the action, if applicable.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "energy_validation_audit_log",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ImportLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("file_name", models.CharField(max_length=255)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                (
                    "file_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 hash of file contents",
                        max_length=64,
                    ),
                ),
                (
                    "source",
                    models.CharField(help_text="Data source name", max_length=100),
                ),
                (
                    "provider",
                    models.CharField(help_text="Data provider name", max_length=100),
                ),
                (
                    "import_type",
                    models.CharField(
                        choices=[
                            ("metering", "Metering Data"),
                            ("registry", "Registry Data"),
                            ("switching", "Switching Data"),
                            ("tariff", "Tariff Data"),
                            ("other", "Other Data"),
                        ],
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("partial", "Partially Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_records", models.IntegerField(default=0)),
                ("processed_records", models.IntegerField(default=0)),
                ("error_records", models.IntegerField(default=0)),
                ("error_details", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.tenant"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EstimationSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "estimation_method",
                    models.CharField(
                        choices=[
                            ("interpolation", "Linear Interpolation"),
                            ("historical_average", "Historical Average"),
                            ("pattern_matching", "Pattern Matching"),
                            ("peer_comparison", "Peer Comparison"),
                            ("seasonal_profile", "Seasonal Profile"),
                            ("carry_forward", "Carry Forward"),
                            ("zero_fill", "Zero Fill"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("gaps_identified", models.IntegerField(default=0)),
                ("gaps_filled", models.IntegerField(default=0)),
                (
                    "average_confidence",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "estimation_results",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed estimation results and statistics",
                    ),
                ),
                (
                    "validation_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="estimation_sessions",
                        to="validation.validationsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Estimation Session",
                "verbose_name_plural": "Estimation Sessions",
                "db_table": "energy_validation_estimation_session",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="EstimationProfile",
            fields=[
                (
                    "valid_from",
                    models.DateField(db_index=True, default=datetime.date.today),
                ),
                ("valid_to", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("user", "User Input"),
                            ("import", "Data Import"),
                            ("api", "API Integration"),
                            ("admin", "Admin Override"),
                            ("system", "System Generated"),
                            ("migration", "Data Migration"),
                        ],
                        default="user",
                        max_length=50,
                    ),
                ),
                (
                    "updated_reason",
                    models.CharField(blank=True, editable=False, max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("profile_code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("meter_type", models.CharField(blank=True, max_length=20)),
                ("tariff_group", models.CharField(blank=True, max_length=50)),
                (
                    "customer_segment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("residential", "Residential"),
                            ("commercial", "Commercial"),
                            ("industrial", "Industrial"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "profile_data",
                    models.JSONField(
                        default=dict,
                        help_text="Profile-specific data (seasonal curves, peer statistics, etc.)",
                    ),
                ),
                ("usage_count", models.IntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.tenant",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Estimation Profile",
                "verbose_name_plural": "Estimation Profiles",
                "db_table": "energy_validation_estimation_profile",
                "ordering": ["profile_code"],
            },
        ),
        migrations.CreateModel(
            name="EstimationHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("method_used", models.CharField(max_length=30)),
                (
                    "input_data",
                    models.JSONField(
                        default=dict,
                        help_text="Data used for estimation (historical values, peer data, etc.)",
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "quality_indicators",
                    models.JSONField(
                        default=dict,
                        help_text="Quality metrics (variance, correlation, etc.)",
                    ),
                ),
                (
                    "actual_kwh",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Actual reading when it becomes available",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "estimation_error",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Difference between estimated and actual",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "estimation_error_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage error",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile_used",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="validation.estimationprofile",
                    ),
                ),
                (
                    "validation_result",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="estimation_history",
                        to="validation.validationresult",
                    ),
                ),
            ],
            options={
                "verbose_name": "Estimation History",
                "verbose_name_plural": "Estimation Histories",
                "db_table": "energy_validation_estimation_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChangeLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "entity_type",
                    models.CharField(help_text="Model or entity type", max_length=100),
                ),
                (
                    "entity_id",
                    models.CharField(
                        help_text="Primary key of the entity", max_length=100
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("override", "Manual Override"),
                            ("correction", "Correction"),
                        ],
                        max_length=20,
                    ),
                ),
                ("field_name", models.CharField(blank=True, max_length=100)),
                ("old_value", models.TextField(blank=True)),
                ("new_value", models.TextField(blank=True)),
                ("reason", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validation_change_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.tenant"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ValidationSummary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("summary_date", models.DateField(db_index=True)),
                (
                    "summary_hour",
                    models.IntegerField(
                        blank=True, help_text="Hour for hourly summaries", null=True
                    ),
                ),
                ("meter_type", models.CharField(blank=True, max_length=20)),
                ("register_code", models.CharField(blank=True, max_length=50)),
                ("total_readings", models.IntegerField(default=0)),
                ("valid_readings", models.IntegerField(default=0)),
                ("invalid_readings", models.IntegerField(default=0)),
                ("estimated_readings", models.IntegerField(default=0)),
                ("suspicious_readings", models.IntegerField(default=0)),
                ("missing_readings", models.IntegerField(default=0)),
                (
                    "validation_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of valid readings",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "estimation_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of estimated readings",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "rule_failures",
                    models.JSONField(
                        default=dict, help_text="Count of failures by rule code"
                    ),
                ),
                ("avg_processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("max_processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.tenant"
                    ),
                ),
            ],
            options={
                "verbose_name": "Validation Summary",
                "verbose_name_plural": "Validation Summaries",
                "db_table": "energy_validation_validation_summary",
                "indexes": [
                    models.Index(
                        fields=["tenant", "summary_date"],
                        name="energy_vali_tenant__1b70cf_idx",
                    )
                ],
                "unique_together": {
                    (
                        "tenant",
                        "summary_date",
                        "summary_hour",
                        "meter_type",
                        "register_code",
                    )
                },
            },
        ),
        migrations.AddIndex(
            model_name="validationsession",
            index=models.Index(
                fields=["tenant", "workflow"], name="energy_vali_tenant__a492a1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="validationsession",
            index=models.Index(fields=["status"], name="energy_vali_status_81230b_idx"),
        ),
        migrations.AddIndex(
            model_name="validationsession",
            index=models.Index(
                fields=["started_at"], name="energy_vali_started_b9f10b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="validationruleoverride",
            unique_together={
                ("tenant", "rule", "icp_id", "register_code", "valid_from")
            },
        ),
        migrations.AlterUniqueTogether(
            name="validationruleexecution",
            unique_together={("session", "rule")},
        ),
        migrations.AddIndex(
            model_name="validationresult",
            index=models.Index(
                fields=["batch", "icp_id"], name="energy_vali_batch_i_a489c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="validationresult",
            index=models.Index(
                fields=["icp_id", "register_code", "read_at"],
                name="energy_vali_icp_id_400129_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="validationresult",
            index=models.Index(
                fields=["final_status"], name="energy_vali_final_s_88960f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="validationresult",
            index=models.Index(
                fields=["is_estimated"], name="energy_vali_is_esti_61303f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="validationresult",
            index=models.Index(
                fields=["processed_at"], name="energy_vali_process_d0af86_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="importlog",
            index=models.Index(
                fields=["tenant", "source", "provider"],
                name="validation__tenant__8aa248_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="importlog",
            index=models.Index(
                fields=["file_name"], name="validation__file_na_cacaff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="importlog",
            index=models.Index(
                fields=["import_type"], name="validation__import__1c26bc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="importlog",
            index=models.Index(fields=["status"], name="validation__status_8c4485_idx"),
        ),
        migrations.AddIndex(
            model_name="changelog",
            index=models.Index(
                fields=["tenant", "entity_type", "entity_id"],
                name="validation__tenant__33aeec_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="changelog",
            index=models.Index(
                fields=["timestamp"], name="validation__timesta_a20bb2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="changelog",
            index=models.Index(
                fields=["changed_by"], name="validation__changed_10f58a_idx"
            ),
        ),
    ]
