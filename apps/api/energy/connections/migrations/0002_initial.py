# Generated by Django 4.2.5 on 2025-08-16 01:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("users", "0001_initial"),
        ("connections", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="connectionplan",
            name="assigned_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="plan_assignments_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="connectionplan",
            name="connection",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plan_assignments",
                to="connections.connection",
            ),
        ),
        migrations.AddField(
            model_name="connectionplan",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="connection_plans",
                to="users.tenant",
            ),
        ),
        migrations.AddField(
            model_name="connection",
            name="account",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="connections",
                to="users.account",
            ),
        ),
        migrations.AddField(
            model_name="connection",
            name="service_address",
            field=models.ForeignKey(
                blank=True,
                help_text="Physical location of the service (not required for mobile)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="connections",
                to="users.address",
            ),
        ),
        migrations.AddField(
            model_name="connection",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="connections",
                to="users.tenant",
            ),
        ),
        migrations.AddIndex(
            model_name="connectionplan",
            index=models.Index(
                fields=["tenant", "connection", "valid_from"],
                name="energy_conn_tenant__d17b6f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="connectionplan",
            index=models.Index(
                fields=["plan_id", "plan_type"], name="energy_conn_plan_id_c88113_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="connectionplan",
            index=models.Index(
                fields=["valid_from", "valid_to"], name="energy_conn_valid_f_3694ed_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="connectionplan",
            constraint=models.UniqueConstraint(
                condition=models.Q(("valid_to__isnull", True)),
                fields=("connection", "valid_from"),
                name="unique_active_plan_per_connection",
            ),
        ),
        migrations.AddIndex(
            model_name="connection",
            index=models.Index(
                fields=["tenant", "service_type", "status"],
                name="energy_conn_tenant__e299a3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="connection",
            index=models.Index(
                fields=["account", "service_type"],
                name="energy_conn_account_895ad6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="connection",
            index=models.Index(
                fields=["connection_identifier", "service_type"],
                name="energy_conn_connect_f53bb9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="connection",
            index=models.Index(
                fields=["valid_from", "valid_to"], name="energy_conn_valid_f_a89319_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="connection",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("icp_code__isnull", False),
                    models.Q(("icp_code", ""), _negated=True),
                ),
                fields=("tenant", "icp_code"),
                name="unique_icp_per_tenant",
            ),
        ),
        migrations.AddConstraint(
            model_name="connection",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("ont_serial__isnull", False),
                    models.Q(("ont_serial", ""), _negated=True),
                ),
                fields=("tenant", "ont_serial"),
                name="unique_ont_per_tenant",
            ),
        ),
        migrations.AddConstraint(
            model_name="connection",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("mobile_number__isnull", False),
                    models.Q(("mobile_number", ""), _negated=True),
                ),
                fields=("tenant", "mobile_number"),
                name="unique_mobile_per_tenant",
            ),
        ),
        migrations.AddConstraint(
            model_name="connection",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("sim_iccid__isnull", False),
                    models.Q(("sim_iccid", ""), _negated=True),
                ),
                fields=("tenant", "sim_iccid"),
                name="unique_sim_per_tenant",
            ),
        ),
        migrations.AddConstraint(
            model_name="connection",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("device_imei__isnull", False),
                    models.Q(("device_imei", ""), _negated=True),
                ),
                fields=("tenant", "device_imei"),
                name="unique_imei_per_tenant",
            ),
        ),
    ]
