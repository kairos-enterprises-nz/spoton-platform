"""
Django settings for utilitybyte project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = BASE_DIR / "staticfiles"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
BACKEND_VERSION = "1.0.0"

# Environment Configuration
ENVIRONMENT = config('ENVIRONMENT', default='development')
# Keycloak client credentials (used for both user and admin operations)
KEYCLOAK_CLIENT_ID = config('KEYCLOAK_CLIENT_ID')
KEYCLOAK_CLIENT_SECRET = config('KEYCLOAK_CLIENT_SECRET')

ENVIRONMENT_CONFIG = {
    'development': {
        'API_VERSION': 'v1-dev',
        'cache_timeout': 300,
        'enable_debug': True,
        'rate_limit': 1000,
        'timestamp_format': '%Y-%m-%d %H:%M:%S',
        'database_prefix': 'dev_',
        'features': {
            'detailed_logging': True,
            'performance_metrics': True,
            'debug_headers': True
        }
    },
    'uat': {
        'API_VERSION': 'v1-uat',
        'cache_timeout': 600,
        'enable_debug': True,
        'rate_limit': 500,
        'timestamp_format': '%Y-%m-%d %H:%M:%S',
        'database_prefix': 'uat_',
        'features': {
            'detailed_logging': True,
            'performance_metrics': True,
            'debug_headers': True
        }
    },
    'live': {
        'API_VERSION': 'v1',
        'cache_timeout': 3600,
        'enable_debug': False,
        'rate_limit': 100,
        'timestamp_format': '%Y-%m-%d %H:%M:%S',
        'database_prefix': 'live_',
        'features': {
            'detailed_logging': False,
            'performance_metrics': False,
            'debug_headers': False
        }
    }
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)
ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', default='localhost,127.0.0.1,backend,*.spoton.co.nz,uat.spoton.co.nz,live.spoton.co.nz,uat.portal.spoton.co.nz,portal.spoton.co.nz,uat.staff.spoton.co.nz,staff.spoton.co.nz,uat.api.spoton.co.nz,api.spoton.co.nz', cast=lambda v: [s.strip() for s in v.split(',')])

# üîê Cookie flags
if DEBUG:
    AUTH_COOKIE_SECURE = False
    AUTH_COOKIE_SAMESITE = "Lax"
else:
    AUTH_COOKIE_SECURE = True
    AUTH_COOKIE_SAMESITE = "None"

# Trust X-Forwarded headers
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE = not DEBUG
SECURE_SSL_REDIRECT = SECURE


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    'rest_framework',
    # JWT packages removed - using Keycloak for authentication
    'corsheaders',
    # 'mozilla_django_oidc',  # Removed - using custom Keycloak implementation
    # 'allauth',  # Removed - using custom Keycloak implementation
    # 'allauth.account',
    # 'allauth.socialaccount', 
    # 'allauth.socialaccount.providers.openid_connect',
    
    # Core applications
    'core',  # Base tenant-aware models and utilities
    'users',  # User, Tenant, Account models
    'core.contracts',  # ServiceContract models
    
    # Web support apps
    'web_support',
    'web_support.address_plans',
    'web_support.public_pricing',
    'web_support.onboarding',
    
    # Energy-specific applications
    'energy.audit',
    'energy.connections',
    'energy.export_core',
    'energy.service_orders',
    'energy.distributor_tariffs',
    'energy.wits',
    'energy.validation',
    'energy.imports',
    'energy.metering',
    'energy.tariff_profile',
    'energy.tariffs',
    'energy.switching',
    'energy.reconciliation',
    'energy.registry',
    'energy.submissions',
    
    # Finance applications
    'finance.billing',
    'finance.invoices',
    'finance.pricing',
]

# --- Feature Flags (Phase 0) ---
# Enable/disable billing per service via environment variables.
# Defaults: disabled in Live; can be enabled in UAT for testing.
BILLING_ENABLE_ELECTRICITY = config('BILLING_ENABLE_ELECTRICITY', cast=bool, default=False)
BILLING_ENABLE_BROADBAND = config('BILLING_ENABLE_BROADBAND', cast=bool, default=False)
BILLING_ENABLE_MOBILE = config('BILLING_ENABLE_MOBILE', cast=bool, default=False)


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'core.middleware.realm_middleware.ThreadLocalMiddleware',  # Thread-local storage setup
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'core.middleware.client_tenant_middleware.ClientBasedTenantMiddleware',  # Client-based tenancy with cookie token extraction (runs first)
    'core.middleware.keycloak_sync.KeycloakUserSyncMiddleware',  # Sync Keycloak users to Django (handles authentication)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Required for admin - but KeycloakUserSyncMiddleware handles API auth
    # 'allauth.account.middleware.AccountMiddleware',  # Removed - using custom Keycloak
    'core.middleware.realm_middleware.RealmDetectionMiddleware',  # Keycloak realm detection (fallback)
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'utilitybyte.middleware.TenantAwareMiddleware',  # Legacy - replaced by ClientBasedTenantMiddleware
]

ROOT_URLCONF = 'utilitybyte.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'utilitybyte.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # Single database with all data in public schema + TimescaleDB schemas
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='utilitybyte'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
        'OPTIONS': {
            'options': '-c search_path=public,metering_processed,wits,metering_raw'
        }
    },
}

# Database routers for TimescaleDB
DATABASE_ROUTERS = [
    "utilitybyte.db_router.DatabaseRouter",     # Simplified routing
]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Pacific/Auckland'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Redis settings (for caching and session storage)
REDIS_URL = config('REDIS_URL')

# CORS settings
CORS_ALLOW_CREDENTIALS = True

# Default CORS origins for development
DEFAULT_CORS_ORIGINS = [
    'http://localhost:5173',
    'https://localhost:5173',
    'http://127.0.0.1:5173',
    'https://127.0.0.1:5173',
    'http://192.168.1.107:5173',
    'https://192.168.1.107:5173',
    'http://localhost:3000',
    'https://localhost:3000',
    'http://192.168.8.183:5173',
    'https://192.168.8.183:5173',
]

# Read CORS origins from environment variable or use defaults
CORS_ORIGINS_ENV = config('CORS_ALLOWED_ORIGINS', default='')
if CORS_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ORIGINS_ENV.split(',')]
else:
    CORS_ALLOWED_ORIGINS = DEFAULT_CORS_ORIGINS


# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'core.middleware.keycloak_sync.KeycloakAuthentication',  # Custom authentication for middleware-set users
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Individual views specify their own permissions
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# ‚úÖ KEYCLOAK AUTHENTICATION ONLY
# JWT settings completely removed - Keycloak handles all authentication
# Django only manages user sync and session cookies

# Session cookie settings
SESSION_COOKIE_SAMESITE = AUTH_COOKIE_SAMESITE
SESSION_COOKIE_SECURE = AUTH_COOKIE_SECURE
SESSION_COOKIE_DOMAIN = '.spoton.co.nz'  # Allow cookies to be sent to all subdomains

# CSRF cookie settings
CSRF_COOKIE_SAMESITE = AUTH_COOKIE_SAMESITE
CSRF_COOKIE_SECURE = AUTH_COOKIE_SECURE
CSRF_COOKIE_DOMAIN = '.spoton.co.nz'  # Allow cookies to be sent to all subdomains
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Replace AUTH_USER_MODEL with our new UserProfile model
# User model
AUTH_USER_MODEL = 'users.User'

# users app settings
OTP_EXPIRATION_TIME = 10  # Example: OTP will be valid for 10 minutes

# ===========================
# ENHANCED MULTI-TENANT SETTINGS
# ===========================

# Note: Using unified JWT settings for both customers and staff
# Staff permissions are handled via user.is_staff and groups, not separate tokens

# Multi-tenant settings with client-based tenancy
TENANT_SETTINGS = {
    'DEFAULT_TENANT_SLUG': config('DEFAULT_TENANT_SLUG', default='spoton'),
    'REQUIRE_TENANT_HEADER': config('REQUIRE_TENANT_HEADER', default=False, cast=bool),
    'TENANT_HEADER_NAME': 'X-Tenant-Slug',
    'AUTO_CREATE_DEFAULT_TENANT': True,
    'PRIMARY_BRAND_NAME': 'SpotOn Energy',
}

# Cookie settings for token storage
AUTH_COOKIE_NAME = config('AUTH_COOKIE_NAME', default='access_token')
AUTH_COOKIE_SECURE = not DEBUG  # Secure in production
AUTH_COOKIE_SAMESITE = 'Lax' if DEBUG else 'None'
AUTH_COOKIE_HTTPONLY = True
AUTH_COOKIE_MAX_AGE = 3600  # 1 hour

# Staff portal groups (will be created in data migration)
STAFF_GROUPS = {
    # Wiki groups removed - now using Wiki.js with its own authentication
    'airflow': ['Airflow Viewer', 'Airflow Operator', 'Airflow Admin'],
    'energy': ['Energy Data Viewer', 'Energy Data Manager', 'Energy Data Admin'],
    'billing': ['Billing Viewer', 'Billing Manager', 'Billing Admin'],
    'system': ['System Admin', 'Support Staff'],
}

# Global service limits per tenant per user (defaults)
DEFAULT_SERVICE_LIMITS = {
    'power': 3,
    'broadband': 2,
    'mobile': 5,
}

# Enhanced versioning settings
VERSIONING_SETTINGS = {
    'AUTO_VERSION_ON_UPDATE': True,
    'KEEP_HISTORY_DAYS': 365 * 5,  # Keep 5 years of history
    'COMPRESS_OLD_VERSIONS': True,
}

# TimescaleDB optimization settings
TIMESCALEDB_SETTINGS = {
    'CHUNK_TIME_INTERVAL': '1 day',
    'COMPRESSION_AFTER': '7 days',
    'RETENTION_POLICY': '2 years',
    'AUTO_VACUUM': True,
}

# Enhanced logging for multi-tenant system
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'tenant_aware': {
            'format': '[{asctime}] {levelname} [{name}] [Tenant: {tenant}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/utilitybyte.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'energy': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core.views.keycloak_auth': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Airflow settings
AIRFLOW_HOME = os.path.join(BASE_DIR, 'airflow')
AIRFLOW_CONFIG = {
    'core': {
        'dags_folder': os.path.join(BASE_DIR, 'energy/imports/dags'),
        'base_log_folder': os.path.join(AIRFLOW_HOME, 'logs'),
        'executor': 'LocalExecutor',
        'sql_alchemy_conn': f"postgresql://{config('DB_USER')}:{config('DB_PASSWORD')}@{config('DB_HOST')}:{config('DB_PORT')}/airflow",
        'load_examples': False,
        'max_active_runs_per_dag': 1,
    },
    'webserver': {
        'web_server_port': 8080,
        'base_url': 'http://localhost:8080',
        'expose_config': True,
    },
    'scheduler': {
        'dag_dir_list_interval': 300,
        'catchup_by_default': False,
    },
    'smtp': {
        'smtp_host': config('SMTP_HOST', default='localhost'),
        'smtp_starttls': True,
        'smtp_ssl': False,
        'smtp_user': config('SMTP_USER', default=''),
        'smtp_password': config('SMTP_PASSWORD', default=''),
        'smtp_port': config('SMTP_PORT', default=587),
        'smtp_mail_from': config('SMTP_FROM', default='noreply@spoton.energy'),
    }
}

# Wiki.js Configuration
WIKI_JS_URL = config('WIKI_JS_URL', default='https://wiki.example.com')
WIKI_JS_TOKEN = config('WIKI_JS_TOKEN', default='')

# ===========================
# KEYCLOAK SSO CONFIGURATION
# ===========================

# Update authentication backends to include django-allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Standard Django authentication
    # 'allauth.account.auth_backends.AuthenticationBackend',  # Removed - using custom Keycloak
    # 'users.keycloak_auth.KeycloakBearerAuthentication',  # Removed - using middleware instead
]

# Keycloak Configuration
KEYCLOAK_ENABLED = config('KEYCLOAK_ENABLED', default=True, cast=bool)
KEYCLOAK_SERVER_URL = config('KEYCLOAK_SERVER_URL', default='https://auth.spoton.co.nz')
KEYCLOAK_CLIENT_SECRET = config('KEYCLOAK_CLIENT_SECRET', default='')

# Multi-realm configuration
KEYCLOAK_REALMS = {
    'staff': {
        'realm': 'spoton-staff',
        'client_id': config('KEYCLOAK_STAFF_CLIENT_ID', default='staff-portal'),
        'client_secret': config('KEYCLOAK_STAFF_CLIENT_SECRET', default=''),
        'authorization_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-staff/protocol/openid-connect/auth',
        'token_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-staff/protocol/openid-connect/token',
        'userinfo_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-staff/protocol/openid-connect/userinfo',
        'jwks_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-staff/protocol/openid-connect/certs',
        'end_session_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-staff/protocol/openid-connect/logout'
    },
    'uat': {
        'realm': 'spoton-uat',
        'client_id': config('KEYCLOAK_UAT_CLIENT_ID', default='api-uat'),
        'client_secret': config('KEYCLOAK_UAT_CLIENT_SECRET', default=''),
        'authorization_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-uat/protocol/openid-connect/auth',
        'token_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-uat/protocol/openid-connect/token',
        'userinfo_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-uat/protocol/openid-connect/userinfo',
        'jwks_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-uat/protocol/openid-connect/certs',
        'end_session_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-uat/protocol/openid-connect/logout'
    },
    'prod': {
        'realm': 'spoton-prod',
        'client_id': config('KEYCLOAK_PROD_CLIENT_ID', default='api-prod'),
        'client_secret': config('KEYCLOAK_PROD_CLIENT_SECRET', default=''),
        'authorization_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-prod/protocol/openid-connect/auth',
        'token_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-prod/protocol/openid-connect/token',
        'userinfo_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-prod/protocol/openid-connect/userinfo',
        'jwks_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-prod/protocol/openid-connect/certs',
        'end_session_endpoint': f'{KEYCLOAK_SERVER_URL}/realms/spoton-prod/protocol/openid-connect/logout'
    }
}

# Default realm to use (based on environment)
if ENVIRONMENT == 'production':
    DEFAULT_KEYCLOAK_REALM = 'prod'
elif ENVIRONMENT == 'uat':
    DEFAULT_KEYCLOAK_REALM = 'uat'
else:
    DEFAULT_KEYCLOAK_REALM = 'uat'  # Use UAT for development too

# Removed OIDC configuration - using custom Keycloak implementation

# Session settings
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# ===========================
# CUSTOM KEYCLOAK AUTHENTICATION
# ===========================
# Using custom Keycloak implementation instead of django-allauth
# for better multi-tenant and environment-aware authentication

# Admin API credentials for Keycloak
KEYCLOAK_ADMIN_CLIENT_ID = config('KEYCLOAK_ADMIN_CLIENT_ID', default='admin-cli')
KEYCLOAK_ADMIN_CLIENT_SECRET = config('KEYCLOAK_ADMIN_CLIENT_SECRET', default='')
